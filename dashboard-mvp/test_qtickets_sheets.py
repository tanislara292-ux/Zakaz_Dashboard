#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è QTickets Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import os
import sys
import json
import argparse
from datetime import datetime, date
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(__file__))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from integrations.qtickets_sheets.gsheets_client import GoogleSheetsClient
        print("‚úÖ gsheets_client –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ gsheets_client: {e}")
        return False
    
    try:
        from integrations.qtickets_sheets.transform import DataTransformer
        print("‚úÖ transform –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ transform: {e}")
        return False
    
    try:
        from integrations.qtickets_sheets.upsert import ClickHouseUpsert
        print("‚úÖ upsert –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ upsert: {e}")
        return False
    
    try:
        from integrations.qtickets_sheets.loader import QTicketsSheetsLoader
        print("‚úÖ loader –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ loader: {e}")
        return False
    
    return True

def test_environment():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = [
        'GSERVICE_JSON',
        'SHEET_ID_SALES',
        'SHEET_ID_EVENTS',
        'SHEET_ID_INVENTORY',
        'TAB_SALES',
        'TAB_EVENTS',
        'TAB_INVENTORY'
    ]
    
    all_ok = True
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}={value[:20]}...")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {var}")
            all_ok = False
    
    return all_ok

def test_google_sheets_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...")
    
    try:
        from integrations.qtickets_sheets.gsheets_client import GoogleSheetsClient
        
        client = GoogleSheetsClient()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂
        sheet_id = os.getenv('SHEET_ID_SALES')
        if sheet_id:
            info = client.get_sheet_info(sheet_id)
            if info:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂: {info.get('title', 'Unknown')}")
                print(f"   –õ–∏—Å—Ç—ã: {[s['title'] for s in info.get('sheets', [])]}")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
        return False

def test_clickhouse_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse...")
    
    try:
        from integrations.common import get_client
        
        client = get_client('secrets/.env.ch')
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        result = client.execute('SELECT version()')
        if result and result.first_row:
            version = result.first_row[0]['version()']
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {version}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é ClickHouse")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
        return False

def test_tables_exist():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...")
    
    try:
        from integrations.common import get_client
        
        client = get_client('secrets/.env.ch')
        
        tables_to_check = [
            'zakaz.stg_qtickets_sheets_raw',
            'zakaz.stg_qtickets_sheets_events',
            'zakaz.stg_qtickets_sheets_inventory',
            'zakaz.stg_qtickets_sheets_sales',
            'zakaz.dim_events',
            'zakaz.fact_qtickets_inventory',
            'zakaz.fact_qtickets_sales'
        ]
        
        all_exist = True
        for table in tables_to_check:
            try:
                result = client.execute(f"EXISTS TABLE {table}")
                if result and result.first_row:
                    exists = result.first_row[0][f'EXISTS TABLE {table}']
                    if exists:
                        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        all_exist = False
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table}")
                    all_exist = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                all_exist = False
        
        return all_exist
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def test_data_transformation():
    """–¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from integrations.qtickets_sheets.transform import DataTransformer
        
        transformer = DataTransformer()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_event = {
            'event_id': 'test-123',
            'event_name': ' Test Event ',
            'event_date': '24.10.2025',
            'city': ' MOSCOW ',
            'tickets_total': '100',
            'tickets_left': '50'
        }
        
        transformed = transformer.transform_event(test_event)
        if transformed:
            print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   event_id: {transformed['event_id']}")
            print(f"   event_name: {transformed['event_name']}")
            print(f"   event_date: {transformed['event_date']}")
            print(f"   city: {transformed['city']}")
        else:
            print("‚ùå –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        test_sale = {
            'date': '2025-10-24',
            'event_id': 'test-123',
            'event_name': ' Test Event ',
            'city': ' MOSCOW ',
            'tickets_sold': '25',
            'revenue': '2500.50',
            'refunds': '100.00',
            'currency': 'RUB'
        }
        
        transformed = transformer.transform_sale(test_sale)
        if transformed:
            print("‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   date: {transformed['date']}")
            print(f"   tickets_sold: {transformed['tickets_sold']}")
            print(f"   revenue: {transformed['revenue']}")
        else:
            print("‚ùå –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_full_loader():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤ dry-run —Ä–µ–∂–∏–º–µ."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ (dry-run)...")
    
    try:
        from integrations.qtickets_sheets.loader import QTicketsSheetsLoader
        from integrations.common import get_client
        from integrations.qtickets_sheets.gsheets_client import GoogleSheetsClient
        from integrations.qtickets_sheets.transform import DataTransformer
        from integrations.qtickets_sheets.upsert import ClickHouseUpsert
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        ch_client = get_client('secrets/.env.ch')
        gsheets_client = GoogleSheetsClient()
        transformer = DataTransformer()
        upserter = ClickHouseUpsert(ch_client)
        
        loader = QTicketsSheetsLoader(ch_client, gsheets_client, transformer, upserter)
        
        # –ó–∞–ø—É—Å–∫ –≤ dry-run —Ä–µ–∂–∏–º–µ
        results = loader.load_all(dry_run=True)
        
        print("‚úÖ Dry-run –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ dry-run –∑–∞–≥—Ä—É–∑—á–∏–∫–∞: {e}")
        return False

def run_smoke_tests():
    """–ó–∞–ø—É—Å–∫ smoke-—Ç–µ—Å—Ç–æ–≤."""
    print("\nüîç –ó–∞–ø—É—Å–∫ smoke-—Ç–µ—Å—Ç–æ–≤...")
    
    try:
        from integrations.common import get_client
        
        client = get_client('secrets/.env.ch')
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        checks = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è", 
             "SELECT count() FROM zakaz.fact_qtickets_sales WHERE date >= today() - 3"),
            
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π", 
             "SELECT uniqExact(event_id) FROM zakaz.dim_events"),
            
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö", 
             "SELECT max(_ver) FROM zakaz.stg_qtickets_sheets_raw WHERE _ingest_ts >= now() - INTERVAL 1 HOUR")
        ]
        
        all_ok = True
        for check_name, query in checks:
            try:
                result = client.execute(query)
                if result and result.first_row:
                    value = result.first_row[0]
                    if isinstance(value, dict):
                        value = list(value.values())[0]
                    print(f"‚úÖ {check_name}: {value}")
                else:
                    print(f"‚ùå {check_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    all_ok = False
            except Exception as e:
                print(f"‚ùå {check_name}: –æ—à–∏–±–∫–∞ {e}")
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ smoke-—Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ QTickets Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--envfile', type=str, default='secrets/.env.qtickets_sheets', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    parser.add_argument('--ch-env', type=str, default='secrets/.env.ch', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ClickHouse')
    parser.add_argument('--skip-integration', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv(args.envfile)
    load_dotenv(args.ch_env)
    
    print("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è QTickets Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
    ]
    
    if not args.skip_integration:
        tests.extend([
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets", test_google_sheets_connection),
            ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse", test_clickhouse_connection),
            ("–°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", test_tables_exist),
            ("–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", test_data_transformation),
            ("–ü–æ–ª–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫", test_full_loader),
            ("Smoke-—Ç–µ—Å—Ç—ã", run_smoke_tests),
        ])
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"   {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == '__main__':
    sys.exit(main())