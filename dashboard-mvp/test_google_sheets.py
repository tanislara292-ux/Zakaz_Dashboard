#!/usr/bin/env python3
"""–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ ClickHouse."""

import os
import sys
import csv
import requests
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).resolve().parents[0]))

from integrations.common import ClickHouseClient, get_client, now_msk, to_date

load_dotenv("secrets/.env.sheets")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GOOGLE_SHEETS_ID = os.getenv("GOOGLE_SHEETS_ID")
GOOGLE_SHEET_NAME = os.getenv("GOOGLE_SHEET_NAME", "–õ–∏—Å—Ç1")
GOOGLE_RANGE = os.getenv("GOOGLE_RANGE", "A:Z")

def download_google_sheets_csv():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV."""
    if not GOOGLE_SHEETS_ID:
        print("‚ùå GOOGLE_SHEETS_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ secrets/.env.sheets")
        return None
    
    url = f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEETS_ID}/export"
    params = {
        "format": "csv",
        "gid": "0",  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    }
    
    try:
        print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = "temp_google_sheets.csv"
        with open(temp_file, "w", encoding="utf-8") as f:
            f.write(response.text)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {temp_file}")
        return temp_file
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def parse_csv_to_records(csv_file):
    """–ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π."""
    records = []
    
    try:
        with open(csv_file, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            headers = reader.fieldnames
            
            print(f"üìä –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: {headers}")
            
            for row in reader:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not any(row.values()):
                    continue
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                record = {}
                for header in headers:
                    value = row.get(header, "").strip()
                    record[header.lower().replace(" ", "_")] = value
                
                records.append(record)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π")
        return records
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ CSV: {e}")
        return []

def normalize_record(record):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse."""
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ UTM-–º–µ—Ç–æ–∫
        utm_source = record.get("utm_source", "")
        utm_medium = record.get("utm_medium", "")
        utm_campaign = record.get("utm_campaign", "")
        utm_content = record.get("utm_content", "")
        utm_term = record.get("utm_term", "")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ utm_content
        utm_city = ""
        utm_day = 0
        utm_month = 0
        
        if utm_content:
            parts = utm_content.split("_")
            if len(parts) >= 3:
                utm_city = parts[0]
                try:
                    utm_day = int(parts[1])
                    utm_month = int(parts[2])
                except ValueError:
                    pass
        
        return {
            "src_msg_id": f"gs_{now_msk().strftime('%Y%m%d_%H%M%S')}_{record.get('id', '')}",
            "ingested_at": now_msk(),
            "event_date": to_date(record.get("–¥–∞—Ç–∞", "")),
            "city": record.get("–≥–æ—Ä–æ–¥", "").strip().lower(),
            "event_name": record.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "").strip(),
            "tickets_sold": int(record.get("–ø—Ä–æ–¥–∞–Ω–æ", 0) or 0),
            "revenue": float(record.get("–≤—ã—Ä—É—á–∫–∞", 0) or 0),
            "refunds_amount": float(record.get("–≤–æ–∑–≤—Ä–∞—Ç—ã", 0) or 0),
            "utm_source": utm_source,
            "utm_medium": utm_medium,
            "utm_campaign": utm_campaign,
            "utm_content": utm_content,
            "utm_term": utm_term,
            "utm_city": utm_city,
            "utm_day": utm_day,
            "utm_month": utm_month,
            "_ver": now_msk()
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        return None

def load_to_clickhouse(records):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ ClickHouse."""
    if not records:
        print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
        return 0
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ClickHouse
        ch_client = get_client("secrets/.env.sheets")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        normalized_records = []
        for record in records:
            normalized = normalize_record(record)
            if normalized:
                normalized_records.append(normalized)
        
        if not normalized_records:
            print("‚ùå –ù–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return 0
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ ClickHouse
        print(f"üíæ –ó–∞–≥—Ä—É–∑–∫–∞ {len(normalized_records)} –∑–∞–ø–∏—Å–µ–π –≤ ClickHouse...")
        ch_client.insert("zakaz.stg_google_sheets_raw", normalized_records)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(normalized_records)} –∑–∞–ø–∏—Å–µ–π")
        return len(normalized_records)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ ClickHouse: {e}")
        return 0

def verify_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    try:
        ch_client = get_client("secrets/.env.sheets")
        
        count = ch_client.execute("SELECT count() FROM zakaz.stg_google_sheets_raw")
        latest = ch_client.execute("SELECT max(event_date) FROM zakaz.stg_google_sheets_raw")
        cities = ch_client.execute("SELECT countDistinct(city) FROM zakaz.stg_google_sheets_raw")
        
        print(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {count}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∞—Ç–∞: {latest}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {cities}")
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        sample = ch_client.execute("SELECT * FROM zakaz.stg_google_sheets_raw LIMIT 5")
        print(f"   –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
        for row in sample:
            print(f"     {row}")
        
        return count
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 0

def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    try:
        if os.path.exists("temp_google_sheets.csv"):
            os.remove("temp_google_sheets.csv")
            print("üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets ===")
    print(f"–î–∞—Ç–∞: {now_msk()}")
    print("")
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    csv_file = download_google_sheets_csv()
    if not csv_file:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets")
        return 1
    
    # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–Ω–≥ CSV
    records = parse_csv_to_records(csv_file)
    if not records:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å CSV —Ñ–∞–π–ª")
        cleanup()
        return 1
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ ClickHouse
    loaded_count = load_to_clickhouse(records)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    verify_count = verify_data()
    
    # –®–∞–≥ 5: –û—á–∏—Å—Ç–∫–∞
    cleanup()
    
    print("")
    if loaded_count > 0 and verify_count > 0:
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return 0
    else:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)