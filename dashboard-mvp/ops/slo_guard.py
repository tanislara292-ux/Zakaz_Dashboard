#!/usr/bin/env python3
"""
SLO Guard - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ SLO.
"""
import os
import sys
import logging
from datetime import datetime, date, timedelta
from typing import Dict, List, Tuple, Optional

import clickhouse_connect
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class SLOGuard:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SLO –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SLO Guard."""
        load_dotenv()
        
        # ClickHouse –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.ch_host = os.getenv('CLICKHOUSE_HOST', 'localhost')
        self.ch_port = int(os.getenv('CLICKHOUSE_PORT', '8123'))
        self.ch_user = os.getenv('CLICKHOUSE_USER', 'etl_writer')
        self.ch_password = os.getenv('CLICKHOUSE_PASSWORD')
        self.ch_database = os.getenv('CLICKHOUSE_DATABASE', 'zakaz')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
        self.tg_bot_token = os.getenv('TG_BOT_TOKEN')
        self.tg_chat_id = os.getenv('TG_CHAT_ID')
        
        # SLO –ø–æ—Ä–æ–≥–∏
        self.slo_thresholds = {
            # –°–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (–≤ —á–∞—Å–∞—Ö)
            'dm_sales_daily_freshness_today': 2.0,
            'dm_sales_daily_freshness_yesterday': 12.0,
            'dm_vk_ads_daily_freshness_today': 3.0,
            'dm_vk_ads_daily_freshness_yesterday': 15.0,
            
            # –ü–æ–ª–Ω–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª—è –æ—Ç 0 –¥–æ 1)
            'dm_sales_daily_completeness_today': 0.95,
            'dm_sales_daily_completeness_yesterday': 0.90,
            'dm_vk_ads_daily_completeness_today': 0.90,
            'dm_vk_ads_daily_completeness_yesterday': 0.85,
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ —á–∞—Å–∞—Ö)
            'dm_sales_daily_latency_today': 4.0,
            'dm_sales_daily_latency_yesterday': 8.0,
            'dm_vk_ads_daily_latency_today': 6.0,
            'dm_vk_ads_daily_latency_yesterday': 12.0,
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self._init_clickhouse_client()
    
    def _init_clickhouse_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            self.ch_client = clickhouse_connect.get_client(
                host=self.ch_host,
                port=self.ch_port,
                username=self.ch_user,
                password=self.ch_password,
                database=self.ch_database
            )
            logger.info("ClickHouse –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ClickHouse –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def get_latest_sli(self) -> Dict[str, Tuple[float, date]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö SLI –∑–Ω–∞—á–µ–Ω–∏–π."""
        try:
            query = """
            SELECT 
                table_name,
                metric_name,
                metric_value,
                d
            FROM meta.sli_daily
            WHERE d >= today() - 1
            ORDER BY d DESC, table_name, metric_name
            """
            
            result = self.ch_client.query(query)
            
            sli_values = {}
            for row in result.result_rows:
                table_name, metric_name, metric_value, d = row
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á SLO
                if d == date.today():
                    slo_key = f"{table_name}_{metric_name}_today"
                else:
                    slo_key = f"{table_name}_{metric_name}_yesterday"
                
                sli_values[slo_key] = (metric_value, d)
            
            return sli_values
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è SLI: {e}")
            return {}
    
    def check_slo_violations(self, sli_values: Dict[str, Tuple[float, date]]) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLO."""
        violations = []
        
        for slo_key, (sli_value, sli_date) in sli_values.items():
            if slo_key in self.slo_thresholds:
                threshold = self.slo_thresholds[slo_key]
                
                # –î–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ - –º–µ–Ω—å—à–µ –ª—É—á—à–µ
                if 'freshness' in slo_key or 'latency' in slo_key:
                    if sli_value > threshold:
                        violations.append({
                            'slo_key': slo_key,
                            'sli_value': sli_value,
                            'threshold': threshold,
                            'date': sli_date,
                            'severity': 'critical' if sli_value > threshold * 2 else 'warning'
                        })
                
                # –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã - –±–æ–ª—å—à–µ –ª—É—á—à–µ
                elif 'completeness' in slo_key:
                    if sli_value < threshold:
                        violations.append({
                            'slo_key': slo_key,
                            'sli_value': sli_value,
                            'threshold': threshold,
                            'date': sli_date,
                            'severity': 'critical' if sli_value < threshold * 0.8 else 'warning'
                        })
        
        return violations
    
    def format_violation_message(self, violation: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏."""
        slo_key = violation['slo_key']
        sli_value = violation['sli_value']
        threshold = violation['threshold']
        severity = violation['severity']
        violation_date = violation['date']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏
        metric_type = 'üïê' if 'freshness' in slo_key else 'üìä' if 'completeness' in slo_key else '‚è±Ô∏è'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"{metric_type} *SLO Violation: {slo_key}*\n"
        message += f"üìÖ Date: {violation_date}\n"
        message += f"üìà Value: {sli_value:.2f}\n"
        message += f"üéØ Threshold: {threshold:.2f}\n"
        message += f"üö® Severity: {severity.upper()}\n"
        
        return message
    
    def send_telegram_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram."""
        if not self.tg_bot_token or not self.tg_chat_id:
            logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TG_BOT_TOKEN –∏–ª–∏ TG_CHAT_ID")
            return
        
        try:
            import requests
            
            url = f"https://api.telegram.org/bot{self.tg_bot_token}/sendMessage"
            data = {
                'chat_id': self.tg_chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            
            logger.info("–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")
    
    def log_alert_to_db(self, violation: Dict):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            alert_sql = """
            INSERT INTO meta.etl_alerts (ts, severity, job, code, message, context_json)
            VALUES (
                now(),
                %(severity)s,
                'slo_guard',
                'SLO_VIOLATION',
                %(message)s,
                %(context)s
            )
            """
            
            self.ch_client.command(
                alert_sql,
                parameters={
                    'severity': violation['severity'],
                    'message': f"SLO violation: {violation['slo_key']}",
                    'context': str(violation)
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def check_and_alert(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ SLO –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ SLO")
        
        try:
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö SLI
            sli_values = self.get_latest_sli()
            
            if not sli_values:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö SLI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return
            
            # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
            violations = self.check_slo_violations(sli_values)
            
            if not violations:
                logger.info("–ù–∞—Ä—É—à–µ–Ω–∏–π SLO –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
                return
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
            for violation in violations:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self.format_violation_message(violation)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                self.send_telegram_alert(message)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –±–∞–∑—É
                self.log_alert_to_db(violation)
                
                logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ SLO: {violation['slo_key']} = {violation['sli_value']:.2f}")
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π SLO –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {len(violations)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SLO: {e}")
            raise
    
    def get_slo_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SLO –¥–ª—è –æ—Ç—á–µ—Ç–∞."""
        try:
            sli_values = self.get_latest_sli()
            violations = self.check_slo_violations(sli_values)
            
            status = {
                'timestamp': datetime.now().isoformat(),
                'total_checks': len(self.slo_thresholds),
                'violations': len(violations),
                'violations_details': violations,
                'sli_values': sli_values
            }
            
            return status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ SLO: {e}")
            return {'error': str(e)}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    import argparse
    
    parser = argparse.ArgumentParser(description='SLO Guard - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SLO')
    parser.add_argument(
        '--check',
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SLO –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã'
    )
    parser.add_argument(
        '--status',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å SLO'
    )
    parser.add_argument(
        '--json',
        action='store_true',
        help='–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON'
    )
    
    args = parser.parse_args()
    
    if not args.check and not args.status:
        parser.print_help()
        return 1
    
    try:
        guard = SLOGuard()
        
        if args.check:
            guard.check_and_alert()
        
        if args.status:
            status = guard.get_slo_status()
            
            if args.json:
                import json
                print(json.dumps(status, indent=2, default=str))
            else:
                print(f"SLO Status at {status.get('timestamp')}")
                print(f"Total checks: {status.get('total_checks', 0)}")
                print(f"Violations: {status.get('violations', 0)}")
                
                if status.get('violations', 0) > 0:
                    print("\nViolations:")
                    for violation in status.get('violations_details', []):
                        print(f"  - {violation['slo_key']}: {violation['sli_value']:.2f} (threshold: {violation['threshold']:.2f})")
        
        return 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SLO Guard: {e}")
        return 1


if __name__ == "__main__":
    exit(main())