#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ClickHouse –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
"""
import os
import sys
import subprocess
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root / "ch-python"))

def run_command(cmd, cwd=None, check=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."""
    print(f"–í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    try:
        result = subprocess.run(
            cmd, shell=True, cwd=cwd, capture_output=True, text=True, check=check
        )
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
        if result.stderr and result.returncode != 0:
            print(f"–û—à–∏–±–∫–∞: {result.stderr.strip()}")
        return result.returncode == 0
    except subprocess.CalledProcessError as e:
        print(f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False

def test_docker_compose():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ Docker Compose."""
    print("\n=== –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ ClickHouse —á–µ—Ä–µ–∑ Docker Compose ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = project_root / ".env"
    if not env_file.exists():
        print("–û–®–ò–ë–ö–ê: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.sample –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ.")
        return False
    
    # –ó–∞–ø—É—Å–∫ Docker Compose
    infra_dir = project_root / "dashboard-mvp" / "infra" / "clickhouse"
    if not infra_dir.exists():
        print(f"–û–®–ò–ë–ö–ê: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {infra_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    if not run_command("docker compose up -d", cwd=infra_dir):
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Compose")
        return False
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ClickHouse
    print("–û–∂–∏–¥–∞—é –∑–∞–ø—É—Å–∫ ClickHouse (10 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(10)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    if not run_command('docker exec ch-zakaz clickhouse-client -q "SELECT version()"'):
        print("–û–®–ò–ë–ö–ê: ClickHouse –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return False
    
    print("‚úÖ ClickHouse —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    return True

def test_database_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∏ —Ç–∞–±–ª–∏—Ü."""
    print("\n=== –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ —Ç–∞–±–ª–∏—Ü ===")
    
    infra_dir = project_root / "dashboard-mvp" / "infra" / "clickhouse"
    env_file = project_root / ".env"
    
    # –ß–∏—Ç–∞–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–∑ .env
    admin_password = None
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                if line.startswith('CLICKHOUSE_ADMIN_PASSWORD='):
                    admin_password = line.split('=', 1)[1].strip()
                    break
    
    if not admin_password:
        print("–û–®–ò–ë–ö–ê: CLICKHOUSE_ADMIN_PASSWORD –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ init.sql
    cmd = f'docker exec -i ch-zakaz clickhouse-client --user=admin --password={admin_password} < init.sql'
    if not run_command(cmd, cwd=infra_dir):
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å init.sql")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    if not run_command('docker exec ch-zakaz clickhouse-client -q "SHOW TABLES FROM zakaz"'):
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        return False
    
    print("‚úÖ –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    return True

def test_python_loader():
    """–¢–µ—Å—Ç Python –ª–æ–∞–¥–µ—Ä–∞."""
    print("\n=== –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ª–æ–∞–¥–µ—Ä–∞ ===")
    
    ch_python_dir = project_root / "dashboard-mvp" / "ch-python"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not run_command("pip install -r requirements.txt", cwd=ch_python_dir, check=False):
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    try:
        from loader.sheets_to_ch import SheetsToClickHouseLoader
        print("‚úÖ –ú–æ–¥—É–ª–∏ –ª–æ–∞–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    except ImportError as e:
        print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CLI (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    cmd = "python cli.py --help"
    if not run_command(cmd, cwd=ch_python_dir):
        print("–û–®–ò–ë–ö–ê: CLI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return False
    
    print("‚úÖ Python –ª–æ–∞–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    return True

def test_smoke_checks():
    """–¢–µ—Å—Ç smoke-–ø—Ä–æ–≤–µ—Ä–æ–∫ SQL."""
    print("\n=== –¢–µ—Å—Ç 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ smoke-–ø—Ä–æ–≤–µ—Ä–æ–∫ ===")
    
    infra_dir = project_root / "dashboard-mvp" / "infra" / "clickhouse"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ smoke_checks.sql
    cmd = 'docker exec -i ch-zakaz clickhouse-client < smoke_checks.sql'
    if not run_command(cmd, cwd=infra_dir):
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å smoke-–ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False
    
    print("‚úÖ Smoke-–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ClickHouse...")
    
    tests = [
        test_docker_compose,
        test_database_initialization,
        test_python_loader,
        test_smoke_checks,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    
    print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! ClickHouse –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ GOOGLE_APPLICATION_CREDENTIALS –∏ GOOGLE_SHEETS_SPREADSHEET_ID –≤ .env")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö: cd dashboard-mvp/ch-python && python cli.py --days 7")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: docker exec -i ch-zakaz clickhouse-client < infra/clickhouse/smoke_checks.sql")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)